// gRPC protocal buffer for a 'key-value' 
// with string key/value pairs kept on the server.

syntax = "proto3";

package keyvalueunary;

// for Go package
//option go_package=

service KeyValueUnary{
    // get the value stored on server for a given key.
    // Empty string returned when key not found in server
    rpc GetValue(GetValueRequest) returns (GetValueReply) {}

    // set server's value for a given key
    rpc SetValue(SetValueRequest) returns (SetValueReply) {}

    // Count the size of server's value for a given key
    // return the size of the value, in bytes. If key isn't found, return -1;
    rpc CountValue(CountValueRequest) returns (CountValueReply) {}
}

message GetValueRequest {
    string key = 1;
}

message GetValueReply {
    string value = 1;
}

message SetValueRequest {
    string key = 1;
    string value = 2;
}

message SetValueReply {
    string value = 1;
}

message CountValueRequest{
    string key = 1;
}

message CountValueReply{
    int64 count = 1;
}